
Communicatie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000104  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000212  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000013b  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001be  00000000  00000000  000004b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000044  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ba  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000024  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4d 00 	call	0x9a	; 0x9a <main>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Configuration>:
		else PORTC &= ~bit(0);
		if(verticaal & bit(i)) PORTC |= bit(1);
		else PORTC &= ~bit(1);
		if(horizontaal & bit(i)) PORTD |= bit(6);
		else PORTD &= ~bit(6);
		if(verticaal & bit(i)) PORTD |= bit(7);
  6c:	10 bc       	out	0x20, r1	; 32
		else PORTD &= ~bit(7);
  6e:	8c e0       	ldi	r24, 0x0C	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	89 b9       	out	0x09, r24	; 9
  72:	88 e1       	ldi	r24, 0x18	; 24
  74:	8a b9       	out	0x0a, r24	; 10
  76:	8e e8       	ldi	r24, 0x8E	; 142
  78:	80 bd       	out	0x20, r24	; 32
  7a:	87 b3       	in	r24, 0x17	; 23
		//rising edge op de clk
		_delay_ms(20);
		PORTD |= bit(5);
  7c:	8f ef       	ldi	r24, 0xFF	; 255
  7e:	87 bb       	out	0x17, r24	; 23
  80:	94 b3       	in	r25, 0x14	; 20
  82:	84 bb       	out	0x14, r24	; 20
  84:	91 b3       	in	r25, 0x11	; 17
  86:	90 6f       	ori	r25, 0xF0	; 240
  88:	91 bb       	out	0x11, r25	; 17
		//clk terug naar beneden
		_delay_ms(20);
		PORTD &= ~bit(5);
  8a:	98 b3       	in	r25, 0x18	; 24
  8c:	98 bb       	out	0x18, r25	; 24
  8e:	95 b3       	in	r25, 0x15	; 21
  90:	9f 60       	ori	r25, 0x0F	; 15
  92:	95 bb       	out	0x15, r25	; 21
  94:	92 b3       	in	r25, 0x12	; 18
  96:	82 bb       	out	0x12, r24	; 18
	// rechts
	unsigned char testhorizontaal = verticaal;
	unsigned char testverticaal = horizontaal;
	
	PORTD &= ~bit(5);
	for(int i = 0 ; i < 8 ; i++) {
  98:	08 95       	ret

0000009a <main>:
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <Configuration>
  9e:	5f 9b       	sbis	0x0b, 7	; 11
  a0:	fe cf       	rjmp	.-4      	; 0x9e <main+0x4>
  a2:	8c b1       	in	r24, 0x0c	; 12
		PORTA &= ~bit(1);
		_delay_ms(20);
		
	}
	*/
  a4:	5d 9b       	sbis	0x0b, 5	; 11
	{
		// receive
		while (!(UCSRA & (1<<RXC)));	// De RXC flag zit in het UCSRA register deze word geset van af het moment dat er ongelezen data in de receive buffer zit	
		data = UDR;
		// transmit
		while (!(UCSRA & (1<<UDRE)));	// de UDRE flag toont aan of de UDR klaar is om nieuwe data te krijgen, we gaan dus wachten tot dat deze leeg is.
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <main+0xa>
		UDR = data;
  a8:	8c b9       	out	0x0c, r24	; 12
		
		//setPanel(0b11010011, 0b10010100);
		//_delay_ms(10);
	}
  aa:	f9 cf       	rjmp	.-14     	; 0x9e <main+0x4>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>
