
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000030  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000003db  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000166  00000000  00000000  0000072f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000273  00000000  00000000  00000895  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001c0  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000165  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000020  00000000  00000000  00000e85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  64:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setPanel>:
        //TODO:: Please write your application code 
		
    }
}

void setPanel(unsigned char horizontaal, unsigned char verticaal) {
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
	// rechts
	unsigned char testhorizontaal = verticaal;
	unsigned char testverticaal = horizontaal;
	
	PORTD &= ~bit(5);
  74:	95 98       	cbi	0x12, 5	; 18
	for(int i = 0 ; i < 8 ; i++) {
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
		//set data lijn juist
		if(horizontaal & bit(i)) PORTC |= bit(2);
  7a:	08 2f       	mov	r16, r24
  7c:	10 e0       	ldi	r17, 0x00	; 0
		else PORTC &= ~bit(2);
		if(verticaal & bit(i)) PORTC |= bit(3);
  7e:	c6 2f       	mov	r28, r22
  80:	d0 e0       	ldi	r29, 0x00	; 0
	unsigned char testverticaal = horizontaal;
	
	PORTD &= ~bit(5);
	for(int i = 0 ; i < 8 ; i++) {
		//set data lijn juist
		if(horizontaal & bit(i)) PORTC |= bit(2);
  82:	a8 01       	movw	r20, r16
  84:	f8 01       	movw	r30, r16
  86:	02 2e       	mov	r0, r18
  88:	02 c0       	rjmp	.+4      	; 0x8e <setPanel+0x22>
  8a:	f5 95       	asr	r31
  8c:	e7 95       	ror	r30
  8e:	0a 94       	dec	r0
  90:	e2 f7       	brpl	.-8      	; 0x8a <setPanel+0x1e>
  92:	cf 01       	movw	r24, r30
  94:	81 70       	andi	r24, 0x01	; 1
  96:	99 27       	eor	r25, r25
  98:	e0 ff       	sbrs	r30, 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <setPanel+0x34>
  9c:	aa 9a       	sbi	0x15, 2	; 21
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <setPanel+0x36>
		else PORTC &= ~bit(2);
  a0:	aa 98       	cbi	0x15, 2	; 21
		if(verticaal & bit(i)) PORTC |= bit(3);
  a2:	fe 01       	movw	r30, r28
  a4:	be 01       	movw	r22, r28
  a6:	02 2e       	mov	r0, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <setPanel+0x42>
  aa:	75 95       	asr	r23
  ac:	67 95       	ror	r22
  ae:	0a 94       	dec	r0
  b0:	e2 f7       	brpl	.-8      	; 0xaa <setPanel+0x3e>
  b2:	db 01       	movw	r26, r22
  b4:	a1 70       	andi	r26, 0x01	; 1
  b6:	bb 27       	eor	r27, r27
  b8:	60 ff       	sbrs	r22, 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <setPanel+0x54>
  bc:	ab 9a       	sbi	0x15, 3	; 21
  be:	01 c0       	rjmp	.+2      	; 0xc2 <setPanel+0x56>
		else PORTC &= ~bit(3);
  c0:	ab 98       	cbi	0x15, 3	; 21
		if(horizontaal & bit(i)) PORTC |= bit(0);
  c2:	00 97       	sbiw	r24, 0x00	; 0
  c4:	11 f0       	breq	.+4      	; 0xca <setPanel+0x5e>
  c6:	a8 9a       	sbi	0x15, 0	; 21
  c8:	01 c0       	rjmp	.+2      	; 0xcc <setPanel+0x60>
		else PORTC &= ~bit(0);
  ca:	a8 98       	cbi	0x15, 0	; 21
		if(verticaal & bit(i)) PORTC |= bit(1);
  cc:	10 97       	sbiw	r26, 0x00	; 0
  ce:	11 f0       	breq	.+4      	; 0xd4 <setPanel+0x68>
  d0:	a9 9a       	sbi	0x15, 1	; 21
  d2:	01 c0       	rjmp	.+2      	; 0xd6 <setPanel+0x6a>
		else PORTC &= ~bit(1);
  d4:	a9 98       	cbi	0x15, 1	; 21
		if(horizontaal & bit(i)) PORTD |= bit(6);
  d6:	89 2b       	or	r24, r25
  d8:	11 f0       	breq	.+4      	; 0xde <setPanel+0x72>
  da:	96 9a       	sbi	0x12, 6	; 18
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <setPanel+0x74>
		else PORTD &= ~bit(6);
  de:	96 98       	cbi	0x12, 6	; 18
		if(verticaal & bit(i)) PORTD |= bit(7);
  e0:	ab 2b       	or	r26, r27
  e2:	11 f0       	breq	.+4      	; 0xe8 <setPanel+0x7c>
  e4:	97 9a       	sbi	0x12, 7	; 18
  e6:	01 c0       	rjmp	.+2      	; 0xea <setPanel+0x7e>
		else PORTD &= ~bit(7);		
  e8:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	87 e8       	ldi	r24, 0x87	; 135
  ec:	93 e1       	ldi	r25, 0x13	; 19
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <setPanel+0x82>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <setPanel+0x88>
  f4:	00 00       	nop
		//rising edge op de clk
		_delay_ms(20);
		PORTD |= bit(5);
  f6:	95 9a       	sbi	0x12, 5	; 18
  f8:	a7 e8       	ldi	r26, 0x87	; 135
  fa:	b3 e1       	ldi	r27, 0x13	; 19
  fc:	11 97       	sbiw	r26, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <setPanel+0x90>
 100:	00 c0       	rjmp	.+0      	; 0x102 <setPanel+0x96>
 102:	00 00       	nop
		//clk terug naar beneden
		_delay_ms(20);
		PORTD &= ~bit(5);
 104:	95 98       	cbi	0x12, 5	; 18
 106:	87 e8       	ldi	r24, 0x87	; 135
 108:	93 e1       	ldi	r25, 0x13	; 19
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <setPanel+0x9e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <setPanel+0xa4>
 110:	00 00       	nop
	// rechts
	unsigned char testhorizontaal = verticaal;
	unsigned char testverticaal = horizontaal;
	
	PORTD &= ~bit(5);
	for(int i = 0 ; i < 8 ; i++) {
 112:	2f 5f       	subi	r18, 0xFF	; 255
 114:	3f 4f       	sbci	r19, 0xFF	; 255
 116:	28 30       	cpi	r18, 0x08	; 8
 118:	31 05       	cpc	r19, r1
 11a:	09 f0       	breq	.+2      	; 0x11e <setPanel+0xb2>
 11c:	b2 cf       	rjmp	.-156    	; 0x82 <setPanel+0x16>
	
	}
	
	// midden
	
	PORTC &= ~bit(5);
 11e:	ad 98       	cbi	0x15, 5	; 21
	for(int i = 0 ; i < 8 ; i++) {
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
		//set data lijn juist
		
		if(horizontaal & bit(i)) PORTB |= bit(2);
 124:	9a 01       	movw	r18, r20
 126:	08 2e       	mov	r0, r24
 128:	02 c0       	rjmp	.+4      	; 0x12e <setPanel+0xc2>
 12a:	35 95       	asr	r19
 12c:	27 95       	ror	r18
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <setPanel+0xbe>
 132:	d9 01       	movw	r26, r18
 134:	a1 70       	andi	r26, 0x01	; 1
 136:	bb 27       	eor	r27, r27
 138:	20 ff       	sbrs	r18, 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <setPanel+0xd4>
 13c:	c2 9a       	sbi	0x18, 2	; 24
 13e:	01 c0       	rjmp	.+2      	; 0x142 <setPanel+0xd6>
		else PORTB &= ~bit(2);
 140:	c2 98       	cbi	0x18, 2	; 24
		if(verticaal & bit(i)) PORTB |= bit(3);
 142:	9f 01       	movw	r18, r30
 144:	08 2e       	mov	r0, r24
 146:	02 c0       	rjmp	.+4      	; 0x14c <setPanel+0xe0>
 148:	35 95       	asr	r19
 14a:	27 95       	ror	r18
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <setPanel+0xdc>
 150:	b9 01       	movw	r22, r18
 152:	61 70       	andi	r22, 0x01	; 1
 154:	77 27       	eor	r23, r23
 156:	20 ff       	sbrs	r18, 0
 158:	03 c0       	rjmp	.+6      	; 0x160 <setPanel+0xf4>
 15a:	c3 9a       	sbi	0x18, 3	; 24
		else PORTB &= ~bit(3);
		
		if(testhorizontaal & bit(i)) PORTB |= bit(0);
 15c:	c0 9a       	sbi	0x18, 0	; 24
 15e:	02 c0       	rjmp	.+4      	; 0x164 <setPanel+0xf8>
		//set data lijn juist
		
		if(horizontaal & bit(i)) PORTB |= bit(2);
		else PORTB &= ~bit(2);
		if(verticaal & bit(i)) PORTB |= bit(3);
		else PORTB &= ~bit(3);
 160:	c3 98       	cbi	0x18, 3	; 24
		
		if(testhorizontaal & bit(i)) PORTB |= bit(0);
		else PORTB &= ~bit(0);
 162:	c0 98       	cbi	0x18, 0	; 24
		if(testverticaal & bit(i)) PORTB |= bit(1);
 164:	ab 2b       	or	r26, r27
 166:	19 f0       	breq	.+6      	; 0x16e <setPanel+0x102>
 168:	c1 9a       	sbi	0x18, 1	; 24
		else PORTB &= ~bit(1);
		
		if(horizontaal & bit(i)) PORTC |= bit(6);
 16a:	ae 9a       	sbi	0x15, 6	; 21
 16c:	02 c0       	rjmp	.+4      	; 0x172 <setPanel+0x106>
		else PORTB &= ~bit(3);
		
		if(testhorizontaal & bit(i)) PORTB |= bit(0);
		else PORTB &= ~bit(0);
		if(testverticaal & bit(i)) PORTB |= bit(1);
		else PORTB &= ~bit(1);
 16e:	c1 98       	cbi	0x18, 1	; 24
		
		if(horizontaal & bit(i)) PORTC |= bit(6);
		else PORTC &= ~bit(6);
 170:	ae 98       	cbi	0x15, 6	; 21
		if(verticaal & bit(i)) PORTC |= bit(7);
 172:	67 2b       	or	r22, r23
 174:	11 f0       	breq	.+4      	; 0x17a <setPanel+0x10e>
 176:	af 9a       	sbi	0x15, 7	; 21
 178:	01 c0       	rjmp	.+2      	; 0x17c <setPanel+0x110>
		else PORTC &= ~bit(7);
 17a:	af 98       	cbi	0x15, 7	; 21
 17c:	a7 e8       	ldi	r26, 0x87	; 135
 17e:	b3 e1       	ldi	r27, 0x13	; 19
 180:	11 97       	sbiw	r26, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <setPanel+0x114>
 184:	00 c0       	rjmp	.+0      	; 0x186 <setPanel+0x11a>
 186:	00 00       	nop
		
		//rising edge op de clk
		_delay_ms(20);
		PORTC |= bit(5);
 188:	ad 9a       	sbi	0x15, 5	; 21
 18a:	a7 e8       	ldi	r26, 0x87	; 135
 18c:	b3 e1       	ldi	r27, 0x13	; 19
 18e:	11 97       	sbiw	r26, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <setPanel+0x122>
 192:	00 c0       	rjmp	.+0      	; 0x194 <setPanel+0x128>
 194:	00 00       	nop
		//clk terug naar beneden
		_delay_ms(20);
		PORTC &= ~bit(5);
 196:	ad 98       	cbi	0x15, 5	; 21
 198:	a7 e8       	ldi	r26, 0x87	; 135
 19a:	b3 e1       	ldi	r27, 0x13	; 19
 19c:	11 97       	sbiw	r26, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <setPanel+0x130>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <setPanel+0x136>
 1a2:	00 00       	nop
	}
	
	// midden
	
	PORTC &= ~bit(5);
	for(int i = 0 ; i < 8 ; i++) {
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	91 05       	cpc	r25, r1
 1aa:	09 f0       	breq	.+2      	; 0x1ae <setPanel+0x142>
 1ac:	bb cf       	rjmp	.-138    	; 0x124 <setPanel+0xb8>
		_delay_ms(20);
	}
	
	// links
	
		PORTA &= ~bit(1);
 1ae:	d9 98       	cbi	0x1b, 1	; 27
		for(int i = 0 ; i < 8 ; i++) {
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	90 e0       	ldi	r25, 0x00	; 0
			//set data lijn juist
			
			if(horizontaal & bit(i)) PORTA |= bit(6);
 1b4:	9a 01       	movw	r18, r20
 1b6:	08 2e       	mov	r0, r24
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <setPanel+0x152>
 1ba:	35 95       	asr	r19
 1bc:	27 95       	ror	r18
 1be:	0a 94       	dec	r0
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <setPanel+0x14e>
 1c2:	b9 01       	movw	r22, r18
 1c4:	61 70       	andi	r22, 0x01	; 1
 1c6:	77 27       	eor	r23, r23
 1c8:	20 ff       	sbrs	r18, 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <setPanel+0x164>
 1cc:	de 9a       	sbi	0x1b, 6	; 27
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <setPanel+0x166>
			else PORTA &= ~bit(6);
 1d0:	de 98       	cbi	0x1b, 6	; 27
			if(verticaal & bit(i)) PORTA |= bit(7);
 1d2:	df 01       	movw	r26, r30
 1d4:	08 2e       	mov	r0, r24
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <setPanel+0x170>
 1d8:	b5 95       	asr	r27
 1da:	a7 95       	ror	r26
 1dc:	0a 94       	dec	r0
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <setPanel+0x16c>
 1e0:	9d 01       	movw	r18, r26
 1e2:	21 70       	andi	r18, 0x01	; 1
 1e4:	33 27       	eor	r19, r19
 1e6:	a0 ff       	sbrs	r26, 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <setPanel+0x182>
 1ea:	df 9a       	sbi	0x1b, 7	; 27
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <setPanel+0x184>
			else PORTA &= ~bit(7);
 1ee:	df 98       	cbi	0x1b, 7	; 27
			
			if(horizontaal & bit(i)) PORTA |= bit(4);
 1f0:	61 15       	cp	r22, r1
 1f2:	71 05       	cpc	r23, r1
 1f4:	11 f0       	breq	.+4      	; 0x1fa <setPanel+0x18e>
 1f6:	dc 9a       	sbi	0x1b, 4	; 27
 1f8:	01 c0       	rjmp	.+2      	; 0x1fc <setPanel+0x190>
			else PORTA &= ~bit(4);
 1fa:	dc 98       	cbi	0x1b, 4	; 27
			if(verticaal & bit(i)) PORTA |= bit(5);
 1fc:	21 15       	cp	r18, r1
 1fe:	31 05       	cpc	r19, r1
 200:	11 f0       	breq	.+4      	; 0x206 <setPanel+0x19a>
 202:	dd 9a       	sbi	0x1b, 5	; 27
 204:	01 c0       	rjmp	.+2      	; 0x208 <setPanel+0x19c>
			else PORTA &= ~bit(5);
 206:	dd 98       	cbi	0x1b, 5	; 27
			
			if(horizontaal & bit(i)) PORTA |= bit(2);
 208:	67 2b       	or	r22, r23
 20a:	11 f0       	breq	.+4      	; 0x210 <setPanel+0x1a4>
 20c:	da 9a       	sbi	0x1b, 2	; 27
 20e:	01 c0       	rjmp	.+2      	; 0x212 <setPanel+0x1a6>
			else PORTA &= ~bit(2);
 210:	da 98       	cbi	0x1b, 2	; 27
			if(verticaal & bit(i)) PORTA |= bit(3);
 212:	23 2b       	or	r18, r19
 214:	11 f0       	breq	.+4      	; 0x21a <setPanel+0x1ae>
 216:	db 9a       	sbi	0x1b, 3	; 27
 218:	01 c0       	rjmp	.+2      	; 0x21c <setPanel+0x1b0>
			else PORTA &= ~bit(3);
 21a:	db 98       	cbi	0x1b, 3	; 27
 21c:	a7 e8       	ldi	r26, 0x87	; 135
 21e:	b3 e1       	ldi	r27, 0x13	; 19
 220:	11 97       	sbiw	r26, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <setPanel+0x1b4>
 224:	00 c0       	rjmp	.+0      	; 0x226 <setPanel+0x1ba>
 226:	00 00       	nop
			
			//rising edge op de clk
			_delay_ms(20);
			PORTA |= bit(1);
 228:	d9 9a       	sbi	0x1b, 1	; 27
 22a:	a7 e8       	ldi	r26, 0x87	; 135
 22c:	b3 e1       	ldi	r27, 0x13	; 19
 22e:	11 97       	sbiw	r26, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <setPanel+0x1c2>
 232:	00 c0       	rjmp	.+0      	; 0x234 <setPanel+0x1c8>
 234:	00 00       	nop
			//clk terug naar beneden
			_delay_ms(20);
			PORTA &= ~bit(1);
 236:	d9 98       	cbi	0x1b, 1	; 27
 238:	a7 e8       	ldi	r26, 0x87	; 135
 23a:	b3 e1       	ldi	r27, 0x13	; 19
 23c:	11 97       	sbiw	r26, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <setPanel+0x1d0>
 240:	00 c0       	rjmp	.+0      	; 0x242 <setPanel+0x1d6>
 242:	00 00       	nop
	}
	
	// links
	
		PORTA &= ~bit(1);
		for(int i = 0 ; i < 8 ; i++) {
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	88 30       	cpi	r24, 0x08	; 8
 248:	91 05       	cpc	r25, r1
 24a:	09 f0       	breq	.+2      	; 0x24e <setPanel+0x1e2>
 24c:	b3 cf       	rjmp	.-154    	; 0x1b4 <setPanel+0x148>
			PORTA &= ~bit(1);
			_delay_ms(20);
		
	}
	
}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <Pinconfiguratie>:

void Pinconfiguratie()
{
	DDRA |= 0xff;
 258:	8a b3       	in	r24, 0x1a	; 26
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	8a bb       	out	0x1a, r24	; 26
	DDRB |= 0xff; //  0b11111111 set alle pinnen op poort C als uitgang
 25e:	97 b3       	in	r25, 0x17	; 23
 260:	87 bb       	out	0x17, r24	; 23
	DDRC |= 0xff; //  0b11111111 set alle pinnen op poort C als uitgang
 262:	94 b3       	in	r25, 0x14	; 20
 264:	84 bb       	out	0x14, r24	; 20
	DDRD |= 0xff; //  0b11110000		of bit(7) | bit(6) | ... // set  pinnen 4 tot 7 als uitgang
 266:	91 b3       	in	r25, 0x11	; 17
 268:	81 bb       	out	0x11, r24	; 17
	PORTA |= 0xff;
 26a:	9b b3       	in	r25, 0x1b	; 27
 26c:	8b bb       	out	0x1b, r24	; 27
	PORTB |= 0xff;
 26e:	98 b3       	in	r25, 0x18	; 24
 270:	88 bb       	out	0x18, r24	; 24
	PORTC |= 0xff;
 272:	95 b3       	in	r25, 0x15	; 21
 274:	85 bb       	out	0x15, r24	; 21
	PORTD |= 0xff;
 276:	92 b3       	in	r25, 0x12	; 18
 278:	82 bb       	out	0x12, r24	; 18
 27a:	08 95       	ret

0000027c <main>:
void setPanel(unsigned char, unsigned char);

int main(void)
{
	
	Pinconfiguratie();
 27c:	0e 94 2c 01 	call	0x258	; 0x258 <Pinconfiguratie>
		//Test();
		//PORTC ^= bit(6);
		//PORTC ^= bit(7);
		//PORTC ^= bit(5);
		//setPanel(0b11010011, 0b10000100);
		setPanel(0b11010011, 0b10010100);
 280:	64 e9       	ldi	r22, 0x94	; 148
 282:	83 ed       	ldi	r24, 0xD3	; 211
 284:	0e 94 36 00 	call	0x6c	; 0x6c <setPanel>
 288:	2f e3       	ldi	r18, 0x3F	; 63
 28a:	8d e0       	ldi	r24, 0x0D	; 13
 28c:	93 e0       	ldi	r25, 0x03	; 3
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <main+0x12>
 296:	00 c0       	rjmp	.+0      	; 0x298 <main+0x1c>
 298:	00 00       	nop
 29a:	f2 cf       	rjmp	.-28     	; 0x280 <main+0x4>

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
